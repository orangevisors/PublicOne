{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\n\nmetadata = {\n  systemName: \"com.k2.example\",\n  displayName: \"Example Broker\",\n  description: \"An example broker that accesses JSONPlaceholder.\",\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n  postSchema({\n    objects: {\n      todo: {\n        displayName: \"TODO\",\n        description: \"Manages a TODO list\",\n        properties: {\n          id: {\n            displayName: \"ID\",\n            type: \"number\",\n          },\n          userId: {\n            displayName: \"User ID\",\n            type: \"number\",\n          },\n          title: {\n            displayName: \"Title\",\n            type: \"string\",\n          },\n          completed: {\n            displayName: \"Completed\",\n            type: \"boolean\",\n          },\n        },\n        methods: {\n          get: {\n            displayName: \"Get TODO\",\n            type: \"read\",\n            inputs: [\"id\"],\n            outputs: [\"id\", \"userId\", \"title\", \"completed\"],\n          },\n          getParams: {\n            displayName: \"Get TODO\",\n            type: \"read\",\n            parameters: {\n              pid: {\n                displayName: \"param1\",\n                description: \"Description Of Param 1\",\n                type: \"number\",\n              },\n            },\n            requiredParameters: [\"pid\"],\n            outputs: [\"id\"],\n          },\n        },\n      },\n    },\n  });\n};\n\nonexecute = async function ({\n  objectName,\n  methodName,\n  parameters,\n  properties,\n  configuration,\n  schema,\n}): Promise<void> {\n  switch (objectName) {\n    case \"todo\":\n      await onexecuteTodo(methodName, properties, parameters);\n      break;\n    default:\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\n  }\n};\n\nasync function onexecuteTodo(\n  methodName: string,\n  properties: SingleRecord,\n  parameters: SingleRecord\n): Promise<void> {\n  switch (methodName) {\n    case \"get\":\n      await onexecuteTodoGet(properties);\n      break;\n    case \"getParams\":\n      await onexecuteTodoGetWithParams(parameters);\n      break;\n    default:\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\n  }\n}\n\nfunction onexecuteTodoGet(properties: SingleRecord): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      try {\n        if (xhr.readyState !== 4) return;\n        if (xhr.status !== 200)\n          throw new Error(\"Failed with status \" + xhr.status);\n\n        var obj = JSON.parse(xhr.responseText);\n        postResult({\n          id: obj.id,\n          userId: obj.userId,\n          title: obj.title,\n          completed: obj.completed,\n        });\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    if (typeof properties[\"id\"] !== \"number\")\n      throw new Error('properties[\"id\"] is not of type number');\n    xhr.open(\n      \"GET\",\n      \"https://jsonplaceholder.typicode.com/todos/\" +\n        encodeURIComponent(properties[\"id\"])\n    );\n    xhr.setRequestHeader(\"test\", \"test value\");\n    xhr.send();\n  });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    try {\n      postResult({\n        id: parameters[\"pid\"],\n      });\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","todo","properties","id","type","userId","title","completed","methods","get","inputs","outputs","getParams","parameters","pid","requiredParameters","onexecute","objectName","methodName","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","e","open","encodeURIComponent","setRequestHeader","send","onexecuteTodoGet","onexecuteTodoGetWithParams","onexecuteTodo"],"mappings":"AAEAA,SAAW,CACTC,WAAY,iBACZC,YAAa,iBACbC,YAAa,oDAGfC,WAAaC,gBAAgBC,cAAEA,IAC7BC,WAAW,CACTC,QAAS,CACPC,KAAM,CACJP,YAAa,OACbC,YAAa,sBACbO,WAAY,CACVC,GAAI,CACFT,YAAa,KACbU,KAAM,UAERC,OAAQ,CACNX,YAAa,UACbU,KAAM,UAERE,MAAO,CACLZ,YAAa,QACbU,KAAM,UAERG,UAAW,CACTb,YAAa,YACbU,KAAM,YAGVI,QAAS,CACPC,IAAK,CACHf,YAAa,WACbU,KAAM,OACNM,OAAQ,CAAC,MACTC,QAAS,CAAC,KAAM,SAAU,QAAS,cAErCC,UAAW,CACTlB,YAAa,WACbU,KAAM,OACNS,WAAY,CACVC,IAAK,CACHpB,YAAa,SACbC,YAAa,yBACbS,KAAM,WAGVW,mBAAoB,CAAC,OACrBJ,QAAS,CAAC,aAQtBK,UAAYnB,gBAAgBoB,WAC1BA,EAD0BC,WAE1BA,EAF0BL,WAG1BA,EAH0BX,WAI1BA,EAJ0BJ,cAK1BA,EAL0BqB,OAM1BA,WAEQF,OACD,aAQTpB,eACEqB,EACAhB,EACAW,UAEQK,OACD,YAWT,SAA0BhB,UACjB,IAAIkB,QAAc,CAACC,EAASC,SAC7BC,EAAM,IAAIC,kBACdD,EAAIE,mBAAqB,kBAEE,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OACN,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAE1CE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAW,CACT9B,GAAI0B,EAAI1B,GACRE,OAAQwB,EAAIxB,OACZC,MAAOuB,EAAIvB,MACXC,UAAWsB,EAAItB,YAEjBc,IACA,MAAOa,GACPZ,EAAOY,KAIqB,iBAArBhC,EAAU,GACnB,MAAM,IAAI0B,MAAM,0CAClBL,EAAIY,KACF,MACA,8CACEC,mBAAmBlC,EAAU,KAEjCqB,EAAIc,iBAAiB,OAAQ,cAC7Bd,EAAIe,SAxCIC,CAAiBrC,aAEpB,kBA0CT,SAAoCW,UAC3B,IAAIO,QAAc,CAACC,EAASC,SAE/BW,WAAW,CACT9B,GAAIU,EAAU,MAEhBQ,IACA,MAAOa,GACPZ,EAAOY,MAjDDM,CAA2B3B,uBAG3B,IAAIe,MAAM,cAAgBV,EAAa,uBApBvCuB,CAAcvB,EAAYhB,EAAYW,uBAGtC,IAAIe,MAAM,cAAgBX,EAAa"}